장점: 1) 코드의 재사용성이 높다. : 라이브러리만 임포트하면 필요한 기능만 뽑아서 사용할 수 있으므로 생산성이 높아지고, 버그 발생률을 줄일 수 있다.
      2) 객체 단위로 코드를 작성하므로 협업에 최적화되어있고 유지보수에 용이하다.

상속 (Inheritance) 
상속이란 어떤 클래스가 다른 클래스를 연장하여 다시 쓰는 것입니다. 기존 클래스는 부모 클래스가 되고, 새로 파생된 클래스는 서브클래스라고 부릅니다. 

캡슐화 (Encapsulation)
내부의 코드를 캡슐처럼 보호하기 위하여 사용됩니다. 즉 캡슐화를 위하여, 모든 인스턴스 변수를 private으로 명시하고, setter와 getter 메소드를 만들어 접근하게 합니다. 캡슐 안의 데이터에 직접적으로 접근하는 것은 불가능하며, 오로지 메소드로만 접근할 수 있습니다.

다형성 (Polymorphism)
하나의 객체를 여러가지 타입으로 해석할 수 있는 기술입니다. 다형성 구현을 위하여 메소드의 이름은 같게 하되, 리턴 형이나 혹은 파라미터의 개수나 타입을 다르게 하여 재정의할 수 있습니다.

추상 (Abstraction)
객체를 생성할 수 없는 클래스로, 오로지 부모클래스로써의 역할만 하는 클래스입니다. 클래스 앞에 abstract 키워드를 붙여서 생성합니다. 추상 클래스는 추상메소드를 반드시 가져야 하지만, 비추상메소드도 가질 수 있습니다. 추상 클래스가 가지는 추상메소드의 접근 제어자는 private은 올 수 없는데, 이는 생각해보면 당연한 것으로, 자식 클래스가 받아서 그 메소드를 오버라이드 할 수 있어야 하기 때문입니다.

인터페이스 (Interface)
인터페이스란 메소드 선언만 하고 구현은 되어있지 않은 템플릿입니다. 인터페이스는 다음의 조건들을 만족해야 합니다.
- 모든 메소드는 내부적으로 public abstract void 이어야 하는데, 다른 클래스에서 구현하여 정의할 수 있어야 하기 때문입니다.
- 모든 변수는 public static final constant 여야 합니다.
- 인터페이스를 구현하는 클래스는 인터페이스에 선언된 모든 메소드를 포함하고 있어야 합니다.

자바는 다중 상속(2개의 클래스 이상 상속하지 못함)을 지원하지 않지만, 인터페이스를 통하여 보강할 수 있습니다. 인터페이스는 팀 작업 시에 공동 템플릿으로 이용 가능합니다.

OOP 특징

- 객체지향 프로그래밍은 코드의 재사용성이 높다.

- 코드의 변경이 용이

- 직관적인 코드분석

- 개발속도 향상 / 상속을 통한 장점 극대화

 